<link rel="stylesheet" href="~/css/events-display.css">

@*`Leagues’, ‘Market’, and ‘Odds’*@
<div class="d-flex justify-content-center">
    <button class="event-button btn-primary rounded" id="btnFootball">Football <img class="imgMargin" src="~/Icons/football-game.png" /></button>
    <button class="event-button btn-primary rounded" id="btnBaseball">Baseball <img class="imgMargin" src="~/Icons/baseball.png" /></button>
    <button class="event-button btn-primary rounded" id="btnTennis">Tennis <img class="imgMargin" src="~/Icons/tennis.png" /></button>
    <button class="event-button btn-primary rounded" id="btnBasket">Basketball <img class="imgMargin" src="~/Icons/basketball.png" /></button>
    <select class="form-select" id="listSelectSports">
        <option selected>More Sports</option>
    </select>
</div>
<div class="d-none justify-content-center" id="show-options">
    <button class="event-live-button btn-primary rounded" id="btnLive">Live</button>
    <button class="event-live-button btn-primary rounded" id="btn-pre-match">Pre-match</button>
    <select class="form-select" id="listSelect" aria-label="Default select example">
        <option selected>Select Leagues</option>
    </select>
</div>
<div id="container"></div>
<table id="eventsTable">
    <colgroup>
        <col span="1" style="width: 5%;">
        <col span="1" style="width: 15.83%;">
        <col span="1" style="width: 15.83%;">
        <col span="1" style="width: 15.83%;">
        <col span="1" style="width: 15.83%;">
        <col span="1" style="width: 15.83%;">
        <col span="1" style="width: 15.83%;">
    </colgroup>
    <thead>
        <tr>
            <th>Sport</th>
            @*   <th>Event ID</th>
            <th>Competition ID</th>*@
            <th>Competition Name</th>
            <th>Competition Country</th>
            <th>Home</th>
            <th>Away</th>
            <th>IR Status</th>
            <th>Start Time</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/js/signalr/dist/browser/signalr.min.js"></script>
<script src="~/js/sports-list.js"></script>
<script src="~/js/buttons-handling.js"></script>
<script src="~/js/table-events-handle.js"></script>


<script>
    var connection = new signalR.HubConnectionBuilder()
        .withUrl('/MyHub')
        .build();
    //connection SignalR started
    connection.start().then(function () {
        // console.log('SignalR connected');
    });
    var footballBtn = document.getElementById('btnFootball');
    var baseballBtn = document.getElementById('btnBaseball');
    var tennisBtn = document.getElementById('btnTennis');
    var basketballBtn = document.getElementById('btnBasket');
    var liveBtn = document.getElementById('btnLive');
    var preMatchBtn = document.getElementById('btn-pre-match');
    var selectList = document.getElementById('listSelect');
    var selectListSports = document.getElementById('listSelectSports');
    var currentSport = "";
    var isLiveClicked = false;
    var isPreMatchClicked = false;
    var divLivePreMatch = document.getElementById('show-options');
    // Selecting League
    selectList.addEventListener("change", function () {
        var selectedValue = selectList.value;
        const buttons = document.querySelectorAll(".event-button");
        displayEventData("getting_list_items");
    });

    // Selecting Other Sports
    selectListSports.addEventListener("change", function () {
        var selectedValue = selectListSports.value;
        currentSport = selectedValue;
        console.log('selected value = ' + currentSport);
        const buttons = document.querySelectorAll(".event-button");
        buttons.forEach(button => {
            button.classList.remove('btn-danger');
            button.classList.add('btn-primary');
        });
        divLivePreMatch.classList.remove('d-none');
        divLivePreMatch.classList.add('d-flex');
        restartButtonLive();
        restartButtonPrematch();
        if (selectListSports.value === "More Sports") {
            divLivePreMatch.classList.add('d-flex');

            divLivePreMatch.classList.add('d-none');
            displayEventData("displayAll");

        }
        else {
            displayEventData("getting_more_sports");

        }
    });
    // Displaying sport
    function displayEventData(sport) {
        connection.off('UpdateData');
        rows = {};

        // Set the currentSport variable to the new sport
        //   currentSport = sport;
        var table = document.getElementById("eventsTable");
        var rowCount = table.rows.length;
        for (var i = rowCount - 1; i > 0; i--) {
            table.deleteRow(i);
        }
        // Define a dictionary to store the rows for each event ID
        var rows = {};
        //selectList.options.length = 0;
        var allItems = [];
        connection.on('UpdateData', function (data) {
            if (sport !== "getting_list_items") {
                for (var i = selectList.options.length - 1; i > 0; i--) {
                    selectList.remove(i);
                }
            }
            allItems = [];

            Object.keys(data).forEach(function (eventId) {
                var eventData = data[eventId];
                if (sport == "displayAll" || sport == "") {
                    SetOptionsForLeagueList(allItems, eventData, selectList);
                    SetRow(rows, table, eventId, eventData);
                }
                //else if (eventData.ir_status === "in_running" && sport == "in_running") {
                //    SetRow(rows, table, eventId, eventData);
                //}
                else if (eventData.sport === sport && !isLiveClicked && !isPreMatchClicked) {
                    SetOptionsForLeagueList(allItems, eventData, selectList);
                    SetRow(rows, table, eventId, eventData);
                }
                else if (eventData.sport === sport && isLiveClicked && eventData.ir_status == "in_running") {
                    console.log("sport: " + sport);
                    SetOptionsForLeagueList(allItems, eventData, selectList);
                    SetRow(rows, table, eventId, eventData);
                }
                else if (eventData.sport === sport && isPreMatchClicked && eventData.ir_status == "pre_event") {
                    console.log("sport: " + sport);
                    SetOptionsForLeagueList(allItems, eventData, selectList);
                    SetRow(rows, table, eventId, eventData);
                }
                else if (sport === "getting_list_items" && eventData.competition_name === selectList.value && !isLiveClicked && !isPreMatchClicked) {
                    ///method for leagues
                    SetRow(rows, table, eventId, eventData);
                }
                else if (sport === "getting_list_items" && eventData.competition_name === selectList.value && isLiveClicked && eventData.ir_status === "in_running") {
                    ///method for leagues
                    SetRow(rows, table, eventId, eventData);
                }
                else if (sport === "getting_list_items" && eventData.competition_name === selectList.value && isPreMatchClicked && eventData.ir_status === "pre_event") {
                    ///method for leagues
                    SetRow(rows, table, eventId, eventData);
                }
                else if (sport === "getting_more_sports" && eventData.sport == selectListSports.value && !isLiveClicked && !isPreMatchClicked) {
                    SetOptionsForLeagueList(allItems, eventData, selectList);
                    SetRow(rows, table, eventId, eventData);
                }
                else if (sport === "getting_more_sports" && eventData.sport == selectListSports.value && isLiveClicked && eventData.ir_status === "in_running") {
                    SetOptionsForLeagueList(allItems, eventData, selectList);
                    SetRow(rows, table, eventId, eventData);
                }
                else if (sport === "getting_more_sports" && eventData.sport == selectListSports.value && isPreMatchClicked && eventData.ir_status === "pre_event") {
                    SetOptionsForLeagueList(allItems, eventData, selectList);
                    SetRow(rows, table, eventId, eventData);
                }
            });
        });
    }
    function SetOptionsForLeagueList(allItems, eventData, selectList) {
        if (allItems.indexOf(eventData.competition_name) == -1) {

            allItems.push(eventData.competition_name);
            var option = document.createElement("option");
            option.text = eventData.competition_name;
            option.value = eventData.competition_name;
            selectList.add(option);
        }
    }
    function highlightButton(clickedButton, currentSport) {
        const buttons = document.querySelectorAll(".event-button");
        selectListSports.selectedIndex = 0;
        buttons.forEach(button => {
            if (button === clickedButton) {
                if (button.classList.contains('btn-danger')) {
                    divLivePreMatch.classList.remove('d-flex');
                    divLivePreMatch.classList.add('d-none');
                    // nije kliknuto
                    button.classList.remove('btn-danger');
                    button.classList.add('btn-primary');
                    currentSport = "";
                }
                else {
                    button.classList.remove('btn-primary');
                    button.classList.add('btn-danger');
                    divLivePreMatch.classList.remove('d-none');
                    divLivePreMatch.classList.add('d-flex');
                    console.log("current sport: " + currentSport);
                }
            }
            else {
                button.classList.remove('btn-danger');
                button.classList.add('btn-primary');
            }
        });
    }
    // Getting All data when page is loaded
    document.addEventListener("DOMContentLoaded", function () {
        HandlingSports();
        console.log("display All should be called ")
        displayEventData("displayAll");
    });
        //
        //FOR OFFERS

        //var container = document.getElementById('container');
        //// Define an event handler for the "UpdateData" event
        //connection.on('UpdateDataOffers', function (data) {
        //        console.log('Data Offers:', data);
        //        var eventRow = document.createElement("p");
        //        eventRow.innerHTML = JSON.stringify(data);

        //        ////container.innerHTML = JSON.stringify(data);
        //        container.appendChild(eventRow);

        //    });

</script>